import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import ENV from '../config/env';

// Import Leaflet CSS with integrity hash
import 'leaflet/dist/leaflet.css';

const { API_BASE_URL } = ENV;
import { FaCalendarAlt, FaMapMarkerAlt, FaUtensils, FaBed, FaPlane, 
  FaWalking, FaTrain, FaBus, FaShip, FaShoppingBag, FaLandmark, 
  FaCamera, FaEllipsisH, FaDollarSign, FaPlus, FaRoute, FaHeart,
  FaSpinner, FaHotel, FaTree, FaMusic, FaUsers, FaChevronRight, 
  FaChevronLeft, FaRegClock, FaRegCalendarAlt, FaRegUser, FaRegMoneyBillAlt,
  FaRegChartBar, FaShare, FaMapMarkedAlt, FaCloudSun, FaCloudMoon, FaUmbrellaBeach } from 'react-icons/fa';
import { BsSunrise, BsSunset, BsThreeDotsVertical, BsPinMap, BsClock } from 'react-icons/bs';
import { GiPathDistance, GiSandsOfTime, GiPath, GiSuitcase, GiVacuumCleaner } from 'react-icons/gi';
import { IoMdRestaurant, IoMdCafe } from 'react-icons/io';
import { MdAttractions, MdLocalHotel, MdDirectionsWalk, MdDirectionsTransit } from 'react-icons/md';
import { toast } from 'react-toastify';
import { motion, AnimatePresence } from 'framer-motion';

const Itinerary = () => {
  const navigate = useNavigate();
  const [activeDay, setActiveDay] = useState(1);
  const [currentItinerary, setCurrentItinerary] = useState(null);
  const [isGettingLocation, setIsGettingLocation] = useState(false);
  const [currentLocation, setCurrentLocation] = useState(null);
  
  // Form state (moved from ItineraryGenerator)
  const [isGenerating, setIsGenerating] = useState(false);
  const [formData, setFormData] = useState({
    destination: '',
    startDate: '',
    endDate: '',
    travelers: 1,
    budget: 'medium',
    interests: []
  });

  const interests = [
    { id: 'culture', name: 'Culture & History', icon: <FaLandmark /> },
    { id: 'food', name: 'Food & Dining', icon: <FaUtensils /> },
    { id: 'nature', name: 'Nature & Parks', icon: <FaTree /> },
    { id: 'photography', name: 'Photography', icon: <FaCamera /> },
    { id: 'nightlife', name: 'Nightlife & Entertainment', icon: <FaMusic /> },
    { id: 'shopping', name: 'Shopping', icon: <FaShoppingBag /> }
  ];

  const budgetOptions = [
    { value: 'low', label: 'Budget ($)', description: 'Affordable options' },
    { value: 'medium', label: 'Moderate ($$)', description: 'Mid-range experiences' },
    { value: 'high', label: 'Luxury ($$$)', description: 'Premium experiences' }
  ];

  // Form handlers (moved from ItineraryGenerator)
  const handleInputChange = (field, value) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const toggleInterest = (interestId) => {
    setFormData(prev => ({
      ...prev,
      interests: prev.interests.includes(interestId)
        ? prev.interests.filter(id => id !== interestId)
        : [...prev.interests, interestId]
    }));
  };

  const canSubmit = () => {
    return (
      formData.destination.trim() !== '' &&
      formData.startDate &&
      formData.endDate &&
      formData.travelers > 0
    );
  };

  // Get current location when component mounts
  useEffect(() => {
    const getLocation = async () => {
      try {
        const position = await new Promise((resolve, reject) => {
          if (!navigator.geolocation) {
            reject(new Error('Geolocation is not supported by your browser'));
          } else {
            navigator.geolocation.getCurrentPosition(resolve, reject);
          }
        });
        
        const { latitude, longitude } = position.coords;
        setCurrentLocation(`${latitude},${longitude}`);
      } catch (error) {
        console.error('Error getting current location:', error);
        toast.warn('Could not get your current location. You can still get directions by entering your starting point manually.');
      }
    };

    getLocation();
  }, []);

  const handleGetDirections = async () => {
    if (!currentItinerary?.destination) return;
    
    // If we already have the current location, use it
    if (currentLocation) {
      navigate('/routes', {
        state: {
          from: currentLocation,
          to: currentItinerary.destination
        }
      });
      return;
    }
    
    // Otherwise, try to get the current location
    setIsGettingLocation(true);
    
    try {
      const position = await new Promise((resolve, reject) => {
        if (!navigator.geolocation) {
          reject(new Error('Geolocation is not supported by your browser'));
        } else {
          navigator.geolocation.getCurrentPosition(resolve, reject);
        }
      });
      
      const { latitude, longitude } = position.coords;
      const locationString = `${latitude},${longitude}`;
      setCurrentLocation(locationString);
      
      // Navigate to Routes page with location data
      navigate('/routes', {
        state: {
          from: locationString,
          to: currentItinerary.destination
        }
      });
      
    } catch (error) {
      console.error('Error getting location:', error);
      toast.error('Could not get your location. You can still get directions by entering your starting point manually.');
      
      // If location access is denied, still navigate but with only the destination
      navigate('/routes', {
        state: {
          to: currentItinerary.destination
        }
      });
    } finally {
      setIsGettingLocation(false);
    }
  };
  
  const displayItinerary = currentItinerary;
  const days = Array.isArray(displayItinerary?.days) ? displayItinerary.days : [];
  const selectedDay = days.find(day => day.id === activeDay) || days[0] || null;

  const generateItinerary = async () => {
    if (!canSubmit()) {
      toast.error('Please fill in all required fields');
      return;
    }

    setIsGenerating(true);
    
    try {
      const requestBody = {
        destination: formData.destination,
        days: Math.ceil((new Date(formData.endDate) - new Date(formData.startDate)) / (1000 * 60 * 60 * 24)) + 1,
        interests: formData.interests,
        startDate: formData.startDate,
        budget: formData.budget,
        travelers: formData.travelers
      };

      const response = await fetch(`${API_BASE_URL}/api/itinerary`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        credentials: 'include',
        body: JSON.stringify(requestBody)
      });
      
      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.message || 'Failed to generate itinerary');
      }
      
      const newItinerary = await response.json();
      setCurrentItinerary(newItinerary);
      setActiveDay(1);
      window.scrollTo(0, 0); // Scroll to top after generating
      
    } catch (error) {
      console.error('Error generating itinerary:', error);
      toast.error(error.message || 'Failed to generate itinerary. Please try again.');
    } finally {
      setIsGenerating(false);
    }
  };

  const handleItineraryGenerated = (newItinerary) => {
    setCurrentItinerary(newItinerary);
    setActiveDay(1);
  };
  
  const getActivityIcon = (type) => {
    const iconClass = "h-5 w-5";
    switch(type) {
      case 'flight':
        return <FaPlane className={`${iconClass} text-blue-500`} />;
      case 'hotel':
        return <FaBed className={`${iconClass} text-purple-500`} />;
      case 'meal':
        return <FaUtensils className={`${iconClass} text-emerald-500`} />;
      case 'sightseeing':
        return <FaCamera className={`${iconClass} text-amber-500`} />;
      case 'transfer':
        return <FaBus className={`${iconClass} text-rose-500`} />;
      case 'tour':
        return <FaWalking className={`${iconClass} text-indigo-500`} />;
      case 'shopping':
        return <FaShoppingBag className={`${iconClass} text-pink-500`} />;
      case 'activity':
        return <FaWalking className={`${iconClass} text-teal-500`} />;
      case 'train':
        return <FaTrain className={`${iconClass} text-orange-500`} />;
      case 'boat':
        return <FaShip className={`${iconClass} text-blue-400`} />;
      case 'culture':
        return <FaLandmark className={`${iconClass} text-amber-600`} />;
      case 'nature':
        return <FaTree className={`${iconClass} text-green-600`} />;
      case 'photography':
        return <FaCamera className={`${iconClass} text-blue-400`} />;
      case 'nightlife':
        return <FaMusic className={`${iconClass} text-purple-500`} />;
      default:
        return <FaEllipsisH className={`${iconClass} text-gray-400`} />;
    }
  };
  
  const renderStatusBadge = (status) => {
    const statusStyles = {
      confirmed: {
        bg: 'bg-green-100',
        text: 'text-green-800',
        icon: '✓',
        label: 'Confirmed'
      },
      pending: {
        bg: 'bg-yellow-100',
        text: 'text-yellow-800',
        icon: '⏳',
        label: 'Pending'
      },
      reserved: {
        bg: 'bg-blue-100',
        text: 'text-blue-800',
        icon: '✓',
        label: 'Reserved'
      },
      cancelled: {
        bg: 'bg-red-100',
        text: 'text-red-800',
        icon: '✕',
        label: 'Cancelled'
      },
      booked: {
        bg: 'bg-purple-100',
        text: 'text-purple-800',
        icon: '✓',
        label: 'Booked'
      }
    };

    const style = statusStyles[status] || { 
      bg: 'bg-gray-100', 
      text: 'text-gray-800',
      icon: '•',
      label: status.charAt(0).toUpperCase() + status.slice(1)
    };
    
    return (
      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${style.bg} ${style.text}`}>
        <span className="mr-1">{style.icon}</span>
        {style.label}
      </span>
    );
  };

  // Show form when no itinerary exists or when explicitly requested
  if (!currentItinerary) {
    return (
      <div className="min-h-screen bg-gradient-to-b from-blue-50 to-indigo-50 p-4 md:p-8">
        <div className="max-w-4xl mx-auto">
          <div className="bg-white rounded-xl shadow-lg p-6 md:p-8 border border-gray-200">
            <h1 className="text-2xl font-bold text-gray-900 mb-6 text-center">Create Your Travel Itinerary</h1>
            
            <div className="space-y-6">
              {/* Destination */}
              <div>
                <label className="block text-sm font-semibold text-gray-900 mb-2">Destination</label>
                <input
                  type="text"
                  placeholder="e.g., Paris, Tokyo, New York"
                  value={formData.destination}
                  onChange={(e) => handleInputChange('destination', e.target.value)}
                  className="w-full p-4 text-lg text-gray-900 bg-white border-2 border-gray-200 rounded-xl focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 focus:outline-none transition-colors placeholder-gray-500"
                />
              </div>

              {/* Travel Dates */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-semibold text-gray-900 mb-2">Start Date</label>
                  <input
                    type="date"
                    value={formData.startDate}
                    onChange={(e) => handleInputChange('startDate', e.target.value)}
                    className="w-full p-3 text-gray-900 bg-white border-2 border-gray-200 rounded-xl focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 focus:outline-none transition-colors"
                  />
                </div>
                <div>
                  <label className="block text-sm font-semibold text-gray-900 mb-2">End Date</label>
                  <input
                    type="date"
                    value={formData.endDate}
                    onChange={(e) => handleInputChange('endDate', e.target.value)}
                    className="w-full p-3 text-gray-900 bg-white border-2 border-gray-200 rounded-xl focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 focus:outline-none transition-colors"
                  />
                </div>
              </div>

              {/* Travelers */}
              <div>
                <label className="block text-sm font-semibold text-gray-900 mb-2">Number of Travelers</label>
                <div className="flex items-center space-x-3">
                  <button 
                    type="button"
                    onClick={() => handleInputChange('travelers', Math.max(1, formData.travelers - 1))}
                    className="w-12 h-12 rounded-xl bg-gray-100 text-gray-700 hover:bg-gray-200 transition-colors flex items-center justify-center text-xl font-bold focus:outline-none focus:ring-2 focus:ring-indigo-500"
                  >
                    -
                  </button>
                  <div className="flex-1 text-center">
                    <span className="text-lg font-semibold">{formData.travelers} {formData.travelers === 1 ? 'Traveler' : 'Travelers'}</span>
                  </div>
                  <button 
                    type="button"
                    onClick={() => handleInputChange('travelers', formData.travelers + 1)}
                    className="w-12 h-12 rounded-xl bg-indigo-600 text-white hover:bg-indigo-700 transition-colors flex items-center justify-center text-xl font-bold focus:outline-none focus:ring-2 focus:ring-indigo-500"
                  >
                    +
                  </button>
                </div>
              </div>

              {/* Budget */}
              <div>
                <label className="block text-sm font-semibold text-gray-900 mb-2">Budget</label>
                <div className="grid grid-cols-3 gap-2">
                  {budgetOptions.map((option) => (
                    <button
                      key={option.value}
                      type="button"
                      onClick={() => handleInputChange('budget', option.value)}
                      className={`p-3 rounded-lg border-2 transition-all ${
                        formData.budget === option.value
                          ? 'border-indigo-600 bg-indigo-50 text-indigo-700'
                          : 'border-gray-200 hover:border-gray-300 bg-white'
                      }`}
                    >
                      <div className="font-medium">{option.label}</div>
                    </button>
                  ))}
                </div>
              </div>

              {/* Interests */}
              <div>
                <label className="block text-sm font-semibold text-gray-900 mb-3">Interests (Optional)</label>
                <div className="grid grid-cols-2 gap-2">
                  {interests.map((interest) => (
                    <button
                      key={interest.id}
                      type="button"
                      onClick={() => toggleInterest(interest.id)}
                      className={`flex items-center p-3 rounded-lg border-2 transition-all ${
                        formData.interests.includes(interest.id)
                          ? 'border-indigo-600 bg-indigo-50 text-indigo-700'
                          : 'border-gray-200 hover:border-gray-300 bg-white'
                      }`}
                    >
                      <span className="mr-2">{interest.icon}</span>
                      <span className="text-sm font-medium">{interest.name}</span>
                    </button>
                  ))}
                </div>
              </div>
            </div>

            {/* Submit Button */}
            <div className="mt-8 pt-6 border-t border-gray-200">
              <button
                type="button"
                onClick={generateItinerary}
                disabled={!canSubmit() || isGenerating}
                className={`w-full py-4 px-6 rounded-xl font-medium text-lg flex items-center justify-center space-x-2 transition-all ${
                  canSubmit() && !isGenerating
                    ? 'bg-indigo-600 text-white hover:bg-indigo-700 shadow-md hover:shadow-indigo-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500'
                    : 'bg-gray-200 text-gray-500 cursor-not-allowed'
                }`}
              >
                {isGenerating ? (
                  <>
                    <FaSpinner className="animate-spin mr-2" />
                    <span>Creating Your Itinerary...</span>
                  </>
                ) : (
                  <>
                    <span>Generate Itinerary</span>
                    <svg className="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
                    </svg>
                  </>
                )}
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  }

  // Add safety check for selectedDay
  // Show empty state when no itinerary exists
  if (!currentItinerary) {
    return (
      <div className="min-h-screen bg-gradient-to-b from-blue-50 to-gray-50 p-4 md:p-8 flex items-center justify-center">
        <div className="text-center max-w-2xl">
          <h2 className="text-3xl font-bold text-gray-800 mb-4">No Itinerary Yet</h2>
          <p className="text-gray-600 text-lg mb-8">Create a new travel itinerary to start planning your perfect trip.</p>
          <button
            onClick={() => setShowGenerator(true)}
            className="bg-blue-600 hover:bg-blue-700 text-white font-medium py-3 px-8 rounded-full text-lg transition-colors inline-flex items-center gap-2"
          >
            <FaPlus /> Create New Itinerary
          </button>
        </div>
      </div>
    );
  }

  // Show loading state when no day is selected but we have an itinerary
  if (!selectedDay) {
    return (
      <div className="min-h-screen bg-gradient-to-b from-light to-gray-100 p-4 md:p-8 flex items-center justify-center">
        <div className="text-center">
          <h2 className="text-2xl font-bold text-gray-800 mb-4">Loading Itinerary...</h2>
          <p className="text-gray-600">Please wait while we load your travel plans.</p>
        </div>
      </div>
    );
  }

  // Animation variants for Framer Motion
  const container = {
    hidden: { opacity: 0 },
    show: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1
      }
    }
  };

  const item = {
    hidden: { opacity: 0, y: 20 },
    show: { opacity: 1, y: 0, transition: { duration: 0.5 } }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-indigo-50">
      <style jsx global>{`
        @keyframes float {
          0% { transform: translateY(0px); }
          50% { transform: translateY(-20px); }
          100% { transform: translateY(0px); }
        }
        .animate-pulse-slow {
          animation: pulse 8s cubic-bezier(0.4, 0, 0.6, 1) infinite;
        }
        .animation-delay-2000 {
          animation-delay: 2s;
        }
        .animation-delay-4000 {
          animation-delay: 4s;
        }
        .scrollbar-hide::-webkit-scrollbar {
          display: none;
        }
        .scrollbar-hide {
          -ms-overflow-style: none;
          scrollbar-width: none;
        }
        .animate-blob {
          animation: blob 7s infinite;
        }
        @keyframes blob {
          0% { transform: translate(0px, 0px) scale(1); }
          33% { transform: translate(30px, -50px) scale(1.1); }
          66% { transform: translate(-20px, 20px) scale(0.9); }
          100% { transform: translate(0px, 0px) scale(1); }
        }
      `}</style>
      {/* Hero Section with Animated Background */}
      <div className="relative bg-gradient-to-br from-indigo-700 via-purple-800 to-indigo-900 text-white overflow-hidden shadow-2xl">
        {/* Animated Background */}
        <div className="absolute inset-0 overflow-hidden">
          <div className="absolute inset-0 bg-gradient-to-b from-black/40 to-black/10"></div>
          <div className="absolute inset-0 bg-[url('https://images.unsplash.com/photo-1501785888041-af3ef285b470?ixlib=rb-4.0.3&auto=format&fit=crop&w=1950&q=80')] bg-cover bg-center opacity-30 animate-pulse-slow"></div>
          
          {/* Animated shapes */}
          <div className="absolute top-0 left-0 w-full h-full overflow-hidden">
            {[...Array(8)].map((_, i) => (
              <div 
                key={i}
                className="absolute rounded-full bg-white/5"
                style={{
                  width: `${Math.random() * 300 + 100}px`,
                  height: `${Math.random() * 300 + 100}px`,
                  top: `${Math.random() * 100}%`,
                  left: `${Math.random() * 100}%`,
                  transform: `translate(-50%, -50%) scale(${Math.random() * 2 + 1})`,
                  filter: 'blur(40px)',
                  animation: `float ${Math.random() * 20 + 20}s linear infinite`,
                  animationDelay: `${Math.random() * 5}s`,
                  opacity: 0.3
                }}
              />
            ))}
          </div>
        </div>
        
        <div className="relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-20 md:py-28">
          <div className="max-w-4xl mx-auto text-center">
            <div className="inline-flex items-center px-4 py-2 rounded-full text-sm font-medium bg-white/10 backdrop-blur-sm text-white/90 mb-6 border border-white/20 transform transition-all hover:scale-105 hover:bg-white/15">
              <span className="w-2.5 h-2.5 rounded-full bg-emerald-400 mr-2 animate-pulse"></span>
              <span className="tracking-wider">YOUR ADVENTURE AWAITS</span>
            </div>
            
            <h1 className="text-5xl md:text-7xl font-extrabold leading-tight mb-6 bg-clip-text text-transparent bg-gradient-to-r from-white via-blue-100 to-purple-200">
              {displayItinerary.destination.split(',')[0]}
              <span className="block text-2xl md:text-3xl font-normal mt-2 text-blue-100">
                {displayItinerary.destination.split(',').slice(1).join(',').trim()}
              </span>
            </h1>
            
            <p className="text-xl text-blue-100 max-w-3xl mx-auto mb-8 leading-relaxed">
              Your perfectly crafted {displayItinerary.duration.toLowerCase()} journey starts here
            </p>
            
            <div className="flex flex-wrap justify-center gap-3 text-sm md:text-base mb-8">
              <span className="flex items-center bg-white/10 backdrop-blur-sm px-4 py-2.5 rounded-full border border-white/20 hover:bg-white/15 transition-all duration-300 transform hover:-translate-y-0.5">
                <FaCalendarAlt className="mr-2 text-blue-200" /> 
                <span className="font-medium">{displayItinerary.duration}</span>
              </span>
              <span className="flex items-center bg-white/10 backdrop-blur-sm px-4 py-2.5 rounded-full border border-white/20 hover:bg-white/15 transition-all duration-300 transform hover:-translate-y-0.5">
                <FaUsers className="mr-2 text-blue-200" /> 
                <span className="font-medium">{displayItinerary.travelers} {displayItinerary.travelers === 1 ? 'Traveler' : 'Travelers'}</span>
              </span>
              <span className="flex items-center bg-white/10 backdrop-blur-sm px-4 py-2.5 rounded-full border border-white/20 hover:bg-white/15 transition-all duration-300 transform hover:-translate-y-0.5">
                <FaDollarSign className="mr-1.5 text-blue-200" /> 
                <span className="font-medium">{displayItinerary.budget}</span>
              </span>
            </div>
            
            <div className="mt-8 flex justify-center gap-4">
              <button 
                onClick={() => setShowGenerator(true)}
                className="px-6 py-3 bg-white text-indigo-700 font-medium rounded-full flex items-center gap-2 hover:bg-indigo-50 transition-all transform hover:-translate-y-0.5 hover:shadow-lg"
              >
                <FaPlus className="text-indigo-600" />
                <span>Edit Itinerary</span>
              </button>
              <button className="px-6 py-3 border-2 border-white/30 text-white font-medium rounded-full flex items-center gap-2 hover:bg-white/10 transition-all transform hover:-translate-y-0.5 hover:shadow-lg">
                <FaShare className="text-white/80" />
                <span>Share</span>
              </button>
            </div>
            </div>
            
            <p className="text-lg text-indigo-100 max-w-2xl leading-relaxed">
              Your personalized travel experience, meticulously crafted to match your preferences and travel style.
            </p>
            
            <div className="mt-8 flex flex-wrap gap-3">
              <button 
                onClick={handleGetDirections}
                className="flex items-center px-5 py-3 bg-white/20 hover:bg-white/30 backdrop-blur-sm rounded-lg border border-white/30 transition-all duration-200 hover:shadow-lg hover:-translate-y-0.5 text-white font-medium"
                disabled={isGettingLocation}
              >
                {isGettingLocation ? (
                  <FaSpinner className="animate-spin mr-2" />
                ) : (
                  <FaRoute className="mr-2" />
                )}
                Get Directions
              </button>
              
              <button className="flex items-center px-5 py-3 bg-white/10 hover:bg-white/20 backdrop-blur-sm rounded-lg border border-white/20 transition-all duration-200 hover:shadow-lg hover:-translate-y-0.5 text-white font-medium">
                <FaHeart className="mr-2 text-rose-400" />
                Save Itinerary
              </button>
            </div>
          </div>
        </div>
        
        <div className="absolute bottom-0 left-0 right-0 h-24 bg-gradient-to-t from-slate-50 to-transparent"></div>
        
        {/* Decorative Elements */}
        <div className="absolute top-1/4 right-10 w-32 h-32 bg-indigo-400 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-blob"></div>
        <div className="absolute top-1/3 left-20 w-40 h-40 bg-purple-400 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-blob animation-delay-2000"></div>
        <div className="absolute bottom-1/4 right-1/4 w-28 h-28 bg-pink-400 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-blob animation-delay-4000"></div>
      </div>

        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between py-2.5">
            <div className="flex items-center space-x-1 overflow-x-auto pb-2 scrollbar-hide px-1">
              <AnimatePresence mode="wait">
                {days.map((day, index) => (
                  <motion.button
                    key={day.id}
                    onClick={() => setActiveDay(day.id)}
                    initial={false}
                    animate={{
                      backgroundColor: activeDay === day.id ? '#4f46e5' : 'transparent',
                      color: activeDay === day.id ? 'white' : '#4b5563',
                      y: activeDay === day.id ? -3 : 0,
                      boxShadow: activeDay === day.id ? '0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)' : 'none'
                    }}
                    whileHover={{
                      y: -2,
                      backgroundColor: activeDay === day.id ? '#4338ca' : '#f9fafb'
                    }}
                    className={`px-5 py-2.5 text-sm font-medium rounded-xl whitespace-nowrap transition-all duration-300 flex flex-col items-center min-w-[100px] relative overflow-hidden group`}
                  >
                    {activeDay === day.id && (
                      <motion.span 
                        className="absolute inset-0 bg-gradient-to-r from-indigo-600 to-purple-600 opacity-90"
                        layoutId="activeTab"
                        initial={false}
                        transition={{
                          type: 'spring',
                          stiffness: 500,
                          damping: 30
                        }}
                      />
                    )}
                    <span className={`relative z-10 text-xs font-semibold mb-0.5 ${activeDay === day.id ? 'text-indigo-100' : 'text-gray-500'}`}>
                      {index === 0 ? 'TODAY' : `DAY ${day.id}`}
                    </span>
                    <span className="relative z-10 font-medium">{day.title.split(' ')[0]}</span>
                    {activeDay === day.id && (
                      <motion.div 
                        className="absolute bottom-0 left-0 right-0 h-0.5 bg-white/50"
                        layoutId="underline"
                      />
                    )}
                  </motion.button>
                ))}
              </AnimatePresence>
            </div>
            
            <div className="hidden md:flex items-center space-x-1.5 ml-4">
              <button 
                className="p-2 rounded-xl hover:bg-gray-100 text-gray-600 hover:text-gray-900 transition-all duration-200 hover:shadow-sm"
                onClick={() => setActiveDay(prev => Math.max(1, prev - 1))}
              >
                <FaChevronLeft className="w-4 h-4" />
              </button>
              <button 
                className="p-2 rounded-xl hover:bg-gray-100 text-gray-600 hover:text-gray-900 transition-all duration-200 hover:shadow-sm"
                onClick={() => setActiveDay(prev => Math.min(days.length, prev + 1))}
              >
                <FaChevronRight className="w-4 h-4" />
              </button>
              <div className="h-6 w-px bg-gray-200 mx-1"></div>
              <button className="p-2 rounded-xl hover:bg-gray-100 text-gray-600 hover:text-gray-900 transition-all duration-200 hover:shadow-sm">
                <BsThreeDotsVertical className="w-4 h-4" />
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <motion.main 
        className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
      >
        {/* Weather and Time Section */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
          <motion.div 
            className="bg-gradient-to-br from-blue-600 to-indigo-700 rounded-2xl shadow-xl p-6 text-white overflow-hidden relative"
            variants={item}
          >
            <div className="absolute top-0 right-0 w-32 h-32 bg-white/5 rounded-full -mr-10 -mt-10"></div>
            <div className="relative z-10">
              <div className="flex items-center justify-between mb-4">
                <h3 className="font-semibold text-lg">Weather</h3>
                <div className="p-2 bg-white/20 rounded-lg backdrop-blur-sm">
                  <FaCloudSun className="text-xl" />
                </div>
              </div>
              <div className="flex items-center justify-between">
                <div>
                  <div className="text-4xl font-bold">24°C</div>
                  <div className="text-sm opacity-80">Sunny</div>
                </div>
                <div className="text-right">
                  <div className="flex items-center text-sm">
                    <FaCloudSun className="mr-1" />
                    <span>High: 28°C</span>
                  </div>
                  <div className="flex items-center text-sm">
                    <FaCloudMoon className="mr-1" />
                    <span>Low: 19°C</span>
                  </div>
                </div>
              </div>
              <div className="mt-4 pt-4 border-t border-white/10">
                <div className="flex justify-between text-xs">
                  <div className="text-center">
                    <div>Mon</div>
                    <div className="text-xl my-1">☀️</div>
                    <div>26°</div>
                  </div>
                  <div className="text-center">
                    <div>Tue</div>
                    <div className="text-xl my-1">⛅</div>
                    <div>25°</div>
                  </div>
                  <div className="text-center">
                    <div>Wed</div>
                    <div className="text-xl my-1">🌧️</div>
                    <div>22°</div>
                  </div>
                  <div className="text-center">
                    <div>Thu</div>
                    <div className="text-xl my-1">🌤️</div>
                    <div>24°</div>
                  </div>
                  <div className="text-center">
                    <div>Fri</div>
                    <div className="text-xl my-1">☀️</div>
                    <div>27°</div>
                  </div>
                </div>
              </div>
            </div>
          </motion.div>

          <motion.div 
            className="bg-gradient-to-br from-amber-600 to-amber-500 rounded-2xl shadow-xl p-6 text-white overflow-hidden relative"
            variants={item}
          >
            <div className="absolute top-0 right-0 w-32 h-32 bg-white/5 rounded-full -mr-10 -mt-10"></div>
            <div className="relative z-10">
              <div className="flex items-center justify-between mb-6">
                <h3 className="font-semibold text-lg">Daylight</h3>
                <div className="p-2 bg-white/20 rounded-lg backdrop-blur-sm">
                  <BsSunrise className="text-xl" />
                </div>
              </div>
              <div className="space-y-4">
                <div>
                  <div className="flex items-center text-sm mb-1">
                    <BsSunrise className="mr-2" />
                    <span>Sunrise</span>
                  </div>
                  <div className="text-2xl font-semibold">6:42 AM</div>
                </div>
                <div>
                  <div className="flex items-center text-sm mb-1">
                    <BsSunset className="mr-2" />
                    <span>Sunset</span>
                  </div>
                  <div className="text-2xl font-semibold">6:15 PM</div>
                </div>
                <div className="pt-3 border-t border-white/10">
                  <div className="flex items-center justify-between text-sm">
                    <span>Day Length</span>
                    <span className="font-medium">11h 33m</span>
                  </div>
                </div>
              </div>
            </div>
          </motion.div>

          <motion.div 
            className="bg-gradient-to-br from-slate-800 to-slate-700 rounded-2xl shadow-xl p-6 text-white overflow-hidden relative"
            variants={item}
          >
            <div className="absolute top-0 right-0 w-32 h-32 bg-white/5 rounded-full -mr-10 -mt-10"></div>
            <div className="relative z-10">
              <div className="flex items-center justify-between mb-6">
                <h3 className="font-semibold text-lg">Local Time</h3>
                <div className="p-2 bg-white/20 rounded-lg backdrop-blur-sm">
                  <BsClock className="text-xl" />
                </div>
              </div>
              <div className="text-center py-4">
                <div className="text-4xl font-bold mb-1">
                  {new Date().toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' })}
                </div>
                <div className="text-sm opacity-80">
                  {new Date().toLocaleDateString('en-US', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })}
                </div>
                <div className="mt-4 pt-4 border-t border-white/10">
                  <div className="flex justify-center space-x-4 text-sm">
                    <div className="text-center">
                      <div className="font-medium">Your Time</div>
                      <div>{new Date().toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' })}</div>
                    </div>
                    <div className="h-8 w-px bg-white/20"></div>
                    <div className="text-center">
                      <div className="font-medium">Time Zone</div>
                      <div>GMT+5:30</div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </motion.div>
        </div>

        {/* Trip Summary Cards */}
        <motion.div 
          className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8"
          variants={container}
          initial="hidden"
          animate="show"
        >
          <motion.div 
            className="bg-white rounded-2xl shadow-xl p-6 border border-gray-100 hover:shadow-2xl transition-all duration-300 transform hover:-translate-y-1"
            variants={item}
          >
            <div className="flex items-center justify-between mb-5">
              <h3 className="font-semibold text-lg text-gray-800">Trip Overview</h3>
              <div className="p-2.5 bg-indigo-100 rounded-xl text-indigo-600">
                <FaRegCalendarAlt className="text-lg" />
              </div>
            </div>
            <div className="space-y-4">
              <div className="flex items-center justify-between text-sm">
                <span className="text-gray-500 flex items-center">
                  <GiSandsOfTime className="mr-2 text-indigo-400" />
                  Duration
                </span>
                <span className="font-medium text-gray-800">{displayItinerary.duration}</span>
              </div>
              <div className="flex items-center justify-between text-sm">
                <span className="text-gray-500 flex items-center">
                  <FaUsers className="mr-2 text-indigo-400" />
                  Travelers
                </span>
                <span className="font-medium text-gray-800">{displayItinerary.travelers} {displayItinerary.travelers === 1 ? 'Person' : 'People'}</span>
              </div>
              <div className="flex items-center justify-between text-sm">
                <span className="text-gray-500 flex items-center">
                  <FaDollarSign className="mr-2 text-indigo-400" />
                  Budget
                </span>
                <span className="font-medium text-gray-800">{displayItinerary.budget}</span>
              </div>
              <div className="pt-3 mt-3 border-t border-gray-100">
                <div className="flex items-center justify-between text-sm">
                  <span className="text-gray-500">Activities</span>
                  <div className="flex -space-x-1">
                    <span className="w-6 h-6 rounded-full bg-indigo-100 border-2 border-white flex items-center justify-center text-xs font-medium text-indigo-600">8</span>
                    <span className="w-6 h-6 rounded-full bg-pink-100 border-2 border-white flex items-center justify-center text-xs font-medium text-pink-600">5</span>
                    <span className="w-6 h-6 rounded-full bg-emerald-100 border-2 border-white flex items-center justify-center text-xs font-medium text-emerald-600">3</span>
                  </div>
                </div>
              </div>
            </div>
          </motion.div>
          
          <motion.div 
            className="bg-white rounded-2xl shadow-xl p-6 border border-gray-100 hover:shadow-2xl transition-all duration-300 transform hover:-translate-y-1"
            variants={item}
          >
            <div className="flex items-center justify-between mb-5">
              <h3 className="font-semibold text-lg text-gray-800">Accommodation</h3>
              <div className="p-2.5 bg-emerald-100 rounded-xl text-emerald-600">
                <FaBed className="text-lg" />
              </div>
            </div>
            <div className="flex items-start">
              <div className="bg-emerald-50 p-3 rounded-xl mr-4">
                <FaHotel className="text-emerald-500 text-xl" />
              </div>
              <div>
                <h4 className="font-medium text-gray-900">The Legian Bali</h4>
                <p className="text-sm text-gray-600">4 nights • Ocean View Suite</p>
                <p className="text-xs text-gray-500 mt-1">Check-in: Jun 15 • Check-out: Jun 19</p>
              </div>
            </div>
          </motion.div>
          
          <div className="bg-white rounded-2xl shadow-lg p-6 border border-gray-100 hover:shadow-xl transition-shadow duration-300">
            <div className="flex items-center justify-between mb-4">
              <h3 className="font-semibold text-lg text-gray-800">Quick Stats</h3>
              <div className="p-2 bg-amber-100 rounded-lg">
                <FaRegChartBar className="text-amber-600" />
              </div>
            </div>
            <div className="grid grid-cols-2 gap-4">
              <div className="bg-gray-50 p-3 rounded-lg text-center">
                <div className="text-2xl font-bold text-indigo-600">12</div>
                <div className="text-xs text-gray-500">Activities</div>
              </div>
              <div className="bg-gray-50 p-3 rounded-lg text-center">
                <div className="text-2xl font-bold text-emerald-600">5</div>
                <div className="text-xs text-gray-500">Reservations</div>
              </div>
              <div className="bg-gray-50 p-3 rounded-lg text-center">
                <div className="text-2xl font-bold text-amber-600">$2,800</div>
                <div className="text-xs text-gray-500">Estimated Cost</div>
              </div>
              <div className="bg-gray-50 p-3 rounded-lg text-center">
                <div className="text-2xl font-bold text-rose-600">1,650 km</div>
                <div className="text-xs text-gray-500">Distance</div>
              </div>
            </div>
          </div>
        </div>
        
        {/* Timeline Section */}
        <div className="relative">
          {/* Vertical line */}
          <div className="absolute left-5 top-0 bottom-0 w-0.5 bg-gradient-to-b from-indigo-200 via-indigo-300 to-indigo-200"></div>
          
          {/* Timeline items */}
          <div className="space-y-8">
            {selectedDay.activities.map((activity, index) => (
              <div key={activity.id} className="relative pl-16 group">
                {/* Timeline dot */}
                <div className="absolute left-0 w-10 h-10 rounded-full bg-white border-4 border-indigo-500 flex items-center justify-center z-10 shadow-md">
                  <div className="w-3 h-3 rounded-full bg-indigo-500 animate-pulse"></div>
                </div>
                
                {/* Time badge */}
                <div className="absolute -left-2 top-0 transform -translate-x-full bg-indigo-100 text-indigo-800 text-xs font-medium px-2.5 py-1 rounded-full whitespace-nowrap">
                  {activity.time}
                </div>
                
                {/* Activity card */}
                <div className="bg-white rounded-2xl shadow-sm border border-gray-100 overflow-hidden transition-all duration-300 hover:shadow-lg hover:-translate-y-0.5 group-hover:border-indigo-100">
                  {/* Activity header */}
                  <div className="p-5 border-b border-gray-100 flex items-start justify-between bg-white">
                    <div className="flex items-start">
                      <div className="flex-shrink-0 h-12 w-12 rounded-xl bg-indigo-50 flex items-center justify-center text-indigo-600 text-xl">
                        {getActivityIcon(activity.type)}
                      </div>
                      <div className="ml-4">
                        <h3 className="text-lg font-semibold text-gray-900">{activity.title}</h3>
                        <div className="flex items-center text-sm text-gray-500 mt-1">
                          <FaMapMarkerAlt className="mr-1.5 h-3.5 w-3.5 flex-shrink-0 text-indigo-400" />
                          <span>{activity.location}</span>
                        </div>
                      </div>
                    </div>
                    {activity.status && (
                      <div className="ml-2">
                        {renderStatusBadge(activity.status)}
                      </div>
                    )}
                  </div>
                  
                  {/* Activity content */}
                  {activity.notes && (
                    <div className="p-5 border-b border-gray-100 bg-gray-50">
                      <p className="text-gray-600">{activity.notes}</p>
                    </div>
                  )}
                  
                  {/* Meta information */}
                  {(activity.duration || activity.price || activity.bookingRef) && (
                    <div className="p-4 bg-white">
                      <div className="flex flex-wrap gap-4">
                        {activity.duration && (
                          <div className="flex items-center text-sm text-gray-600 bg-gray-50 px-3 py-1.5 rounded-lg">
                            <FaRegClock className="mr-1.5 h-4 w-4 text-indigo-400" />
                            {activity.duration}
                          </div>
                        )}
                        
                        {activity.price && (
                          <div className="flex items-center text-sm text-gray-600 bg-gray-50 px-3 py-1.5 rounded-lg">
                            <FaRegMoneyBillAlt className="mr-1.5 h-4 w-4 text-emerald-400" />
                            {activity.price}
                          </div>
                        )}
                        
                        {activity.bookingRef && (
                          <div className="flex items-center text-sm text-gray-600 bg-gray-50 px-3 py-1.5 rounded-lg">
                            <FaRegUser className="mr-1.5 h-4 w-4 text-amber-400" />
                            Ref: {activity.bookingRef}
                          </div>
                        )}
                      </div>
                    </div>
                  )}
                  
                  {/* Includes section */}
                  {activity.includes && activity.includes.length > 0 && (
                    <div className="p-4 bg-gray-50 border-t border-gray-100">
                      <div className="text-xs font-medium text-gray-500 mb-2">INCLUDES</div>
                      <div className="flex flex-wrap gap-2">
                        {activity.includes.map((item, i) => (
                          <span key={i} className="inline-flex items-center px-3 py-1 bg-white text-sm text-gray-700 rounded-full border border-gray-200">
                            <span className="w-1.5 h-1.5 rounded-full bg-green-500 mr-2"></span>
                            {item}
                          </span>
                        ))}
                      </div>
                    </div>
                  )}
                  
                  {/* Action buttons */}
                  <div className="px-4 py-3 bg-gray-50 border-t border-gray-100 flex justify-end space-x-3">
                    <button className="px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-100 rounded-lg transition-colors">
                      View Details
                    </button>
                    <button className="px-4 py-2 text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 rounded-lg transition-colors shadow-sm">
                      Get Directions
                    </button>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
        
      </main>
      
      {/* Floating Action Button */}
      <div className="fixed bottom-8 right-8 z-20">
        <button className="p-4 bg-indigo-600 hover:bg-indigo-700 text-white rounded-full shadow-xl hover:shadow-2xl transition-all duration-300 transform hover:scale-105 flex items-center justify-center">
          <FaPlus className="w-6 h-6" />
        </button>
      </div>
    </div>
  );
};

export default Itinerary;